---
- name: Ensure the mariadb service is running.
  ansible.builtin.systemd:
    name: mariadb
    enabled: true
    state: started

- name: Install required MySQL python modules.
  ansible.builtin.pip:
    name:
      - PyMySQL
    state: present

- name: Disable remote root login.
  ansible.builtin.command:
    cmd: 'mysql -ne "{{ item }}"'
  loop:
    - "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
  changed_when: false
  when: ptero_db_root_pass is not defined or ptero_db_root_pass == ''

- name: Disable remote root login.
  community.mysql.mysql_query:
    query: DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
    login_user: root
    login_unix_socket: /run/mysqld/mysqld.sock
    login_password: "{{ ptero_db_root_pass }}"
  when: ptero_db_root_pass is defined and ptero_db_root_pass != ''

- name: Generate root password if not provided.
  ansible.builtin.set_fact:
    ptero_db_root_pass: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters length=32') }}"
  when: ptero_db_root_pass is not defined or ptero_db_root_pass == ''
  register: ptero_db_root_pass_generated
  no_log: true

- name: Set root password.
  community.mysql.mysql_user:
    name: root
    login_unix_socket: /run/mysqld/mysqld.sock # Required  in debian11/ubuntu2004+
    check_implicit_admin: true
    login_user: root
    login_password: "{{ ptero_db_root_pass }}"
    password: "{{ ptero_db_root_pass }}"
    host: "{{ item }}"
  loop:
    - "localhost"
    - "127.0.0.1"
    - "::1"
  no_log: true

- name: Remove all anonymous mariadb users.
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ ptero_db_root_pass }}"
    name: ''
    host_all: true
    state: absent

- name: Remove 'test' database.
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ ptero_db_root_pass }}"
    login_unix_socket: /run/mysqld/mysqld.sock # Required  in debian11/ubuntu2004+
    db:
      - test
    state: absent

- name: Ensure pterodactyl database exists.
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ ptero_db_root_pass }}"
    login_unix_socket: /run/mysqld/mysqld.sock # Required  in debian11/ubuntu2004+
    name: "{{ ptero_db_name }}"
    state: present

- name: Generate database password if not provided.
  ansible.builtin.set_fact:
    ptero_db_user_pass: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters length=32') }}"
  when: ptero_db_user_pass is not defined or ptero_db_user_pass == ''
  register: ptero_db_user_pass_generated
  no_log: true

- name: Ensure pterodactyl database user exists.
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ ptero_db_root_pass }}"
    login_unix_socket: /run/mysqld/mysqld.sock # Required  in debian11/ubuntu2004+
    name: "{{ ptero_db_user_name }}"
    password: "{{ ptero_db_user_pass }}"
    priv: 'panel.*:ALL'
    state: present
  no_log: true

- name: Print DB User Password if it was generated by the task.
  ansible.builtin.debug:
    msg: "Database user password was generated as: '{{ ptero_db_user_pass }}'. You should probably write this down."
  when: ptero_db_user_pass_generated is defined
  no_log: true

- name: Print DB Root User Password if it was generated by the task.
  ansible.builtin.debug:
    msg: "Database root user password was generated as: '{{ ptero_db_root_pass }}'. You should probably write this down."
  when: ptero_db_root_pass_generated is defined
  no_log: true
